---
// Simplified Header with content integration
import { siteContent } from "../content";
import {
    languages,
    getLanguageFromUrl,
    addLanguageToUrl,
} from "../content/i18n";

const currentLang = getLanguageFromUrl(Astro.url.pathname);

const menuItems = [
    { name: "Home", url: "/" },
    { name: "Workshops", url: "/workshops" },
    { name: "Blog", url: "/blog" },
    { name: "Newsletter", url: "/newsletter" },
    { name: "Spenden", url: "/spenden" },
    { name: "Jahresberichte", url: "/jahresberichte" },
];
---

<header
    id="main-header"
    class="bg-white dark:bg-gray-900 text-accent-900 dark:text-gray-100 shadow-sm fixed top-0 left-0 right-0 z-50 transition-transform duration-300 ease-in-out"
>
    <div class="container mx-auto px-6">
        <div class="flex items-center justify-between h-16 relative">
            <!-- Logo -->
            <a href="/" class="flex items-center space-x-3">
                <img
                    src={siteContent.site.logo.image}
                    alt={siteContent.site.logo.text}
                    width={siteContent.site.logo.width}
                    height={siteContent.site.logo.height}
                    class="rounded-lg"
                />
                <span
                    class="text-xl font-bold text-accent-900 dark:text-gray-100"
                >
                    {siteContent.site.logo.text}
                </span>
            </a>

            <!-- Navigation -->
            <nav class="hidden md:flex space-x-8">
                {
                    menuItems.map((item) => (
                        <a
                            href={item.url}
                            class="text-gray-600 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 font-medium transition-colors"
                        >
                            {item.name}
                        </a>
                    ))
                }
            </nav>

            <!-- Controls: Language and Theme toggles, Mobile Menu -->
            <div class="flex items-center space-x-2">
                <!-- Language Toggle -->
                <div class="relative">
                    <button
                        id="language-toggle"
                        class="flex items-center space-x-1 p-2 rounded-lg bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors"
                        aria-label="Change language"
                    >
                        <span class="text-sm font-medium"
                            >{languages[currentLang].flag}</span
                        >
                        <span class="hidden sm:block text-sm"
                            >{languages[currentLang].code.toUpperCase()}</span
                        >
                        <svg
                            class="w-4 h-4"
                            fill="currentColor"
                            viewBox="0 0 20 20"
                        >
                            <path
                                fill-rule="evenodd"
                                d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
                                clip-rule="evenodd"></path>
                        </svg>
                    </button>

                    <!-- Language Dropdown -->
                    <div
                        id="language-dropdown"
                        class="hidden absolute right-0 mt-2 w-48 bg-white dark:bg-gray-800 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700 z-50"
                    >
                        {
                            Object.entries(languages).map(([code, lang]) => (
                                <a
                                    href={addLanguageToUrl(
                                        Astro.url.pathname,
                                        code as any,
                                    )}
                                    class={`flex items-center space-x-3 px-4 py-3 text-sm hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors ${
                                        currentLang === code
                                            ? "bg-primary-50 dark:bg-primary-900 text-primary-600 dark:text-primary-400"
                                            : "text-gray-700 dark:text-gray-300"
                                    } ${code === Object.keys(languages)[0] ? "rounded-t-lg" : ""} ${code === Object.keys(languages)[Object.keys(languages).length - 1] ? "rounded-b-lg" : ""}`}
                                >
                                    <span class="text-lg">{lang.flag}</span>
                                    <span class="font-medium">{lang.name}</span>
                                    {currentLang === code && (
                                        <svg
                                            class="w-4 h-4 ml-auto"
                                            fill="currentColor"
                                            viewBox="0 0 20 20"
                                        >
                                            <path
                                                fill-rule="evenodd"
                                                d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
                                                clip-rule="evenodd"
                                            />
                                        </svg>
                                    )}
                                </a>
                            ))
                        }
                    </div>
                </div>

                <!-- Theme Toggle -->
                <button
                    id="theme-toggle"
                    class="p-2 rounded-lg bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors"
                    aria-label="Toggle theme"
                >
                    <svg
                        class="w-5 h-5"
                        fill="currentColor"
                        viewBox="0 0 20 20"
                    >
                        <!-- Sun icon for light mode -->
                        <path
                            class="dark:hidden"
                            d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z"
                            fill-rule="evenodd"
                            clip-rule="evenodd"></path>
                        <!-- Moon icon for dark mode -->
                        <path
                            class="hidden dark:block"
                            d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"
                        ></path>
                    </svg>
                </button>

                <!-- Mobile Menu Button -->
                <button
                    id="mobile-menu-toggle"
                    class="md:hidden p-2 rounded-lg bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors"
                    aria-label="Toggle mobile menu"
                >
                    <svg
                        class="w-6 h-6"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                    >
                        <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M4 6h16M4 12h16M4 18h16"></path>
                    </svg>
                </button>
            </div>

            <!-- Mobile Menu -->
            <div
                id="mobile-menu"
                class="hidden absolute top-16 left-0 right-0 bg-white dark:bg-gray-900 shadow-lg border-t border-gray-200 dark:border-gray-700 z-40 md:hidden"
            >
                <div class="container mx-auto px-6 py-4">
                    {
                        menuItems.map((item, index) => (
                            <a
                                href={item.url}
                                class="block py-3 text-gray-600 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 hover:bg-gray-50 dark:hover:bg-gray-800 font-medium border-b border-gray-100 dark:border-gray-800 last:border-b-0 rounded-lg transition-colors"
                            >
                                {item.name}
                            </a>
                        ))
                    }
                </div>
            </div>
        </div>
    </div>

    <script>
        // Theme toggle functionality
        const themeToggle = document.getElementById("theme-toggle");
        const mobileMenuToggle = document.getElementById("mobile-menu-toggle");
        const mobileMenu = document.getElementById("mobile-menu");
        const languageToggle = document.getElementById("language-toggle");
        const languageDropdown = document.getElementById("language-dropdown");

        themeToggle?.addEventListener("click", () => {
            const isDark = document.documentElement.classList.toggle("dark");
            // Save theme preference to localStorage
            localStorage.setItem("theme", isDark ? "dark" : "light");
        });

        mobileMenuToggle?.addEventListener("click", () => {
            mobileMenu?.classList.toggle("hidden");
        });

        // Close mobile menu when clicking on a link
        mobileMenu?.addEventListener("click", (e) => {
            if (e.target instanceof HTMLAnchorElement) {
                mobileMenu.classList.add("hidden");
            }
        });

        // Close mobile menu when clicking outside
        document.addEventListener("click", (e) => {
            const target = e.target as Node;
            if (
                !mobileMenuToggle?.contains(target) &&
                !mobileMenu?.contains(target)
            ) {
                mobileMenu?.classList.add("hidden");
            }
        });

        // Language dropdown functionality
        languageToggle?.addEventListener("click", (e) => {
            e.stopPropagation();
            languageDropdown?.classList.toggle("hidden");
        });

        // Close language dropdown when clicking outside
        document.addEventListener("click", (e) => {
            const target = e.target as Node;
            if (
                !languageToggle?.contains(target) &&
                !languageDropdown?.contains(target)
            ) {
                languageDropdown?.classList.add("hidden");
            }
        });

        // Close dropdowns on escape key
        document.addEventListener("keydown", (e) => {
            if (e.key === "Escape") {
                languageDropdown?.classList.add("hidden");
                mobileMenu?.classList.add("hidden");
            }
        });

        // Auto-hide header on scroll
        let lastScrollTop = 0;
        let isScrolling = false;
        const header = document.getElementById("main-header");

        const handleScroll = () => {
            if (!isScrolling) {
                window.requestAnimationFrame(() => {
                    const scrollTop =
                        window.pageYOffset ||
                        document.documentElement.scrollTop;

                    // Only hide header after scrolling past initial viewport
                    if (scrollTop > 80) {
                        if (scrollTop > lastScrollTop && scrollTop > 200) {
                            // Scrolling down - hide header
                            header?.style.setProperty(
                                "transform",
                                "translateY(-100%)",
                            );
                        } else {
                            // Scrolling up - show header
                            header?.style.setProperty(
                                "transform",
                                "translateY(0)",
                            );
                        }
                    } else {
                        // Always show header at top of page
                        header?.style.setProperty("transform", "translateY(0)");
                    }

                    lastScrollTop = scrollTop <= 0 ? 0 : scrollTop;
                    isScrolling = false;
                });
            }
            isScrolling = true;
        };

        // Throttled scroll listener for better performance
        let scrollTimeout: ReturnType<typeof setTimeout>;
        window.addEventListener("scroll", () => {
            if (scrollTimeout) {
                clearTimeout(scrollTimeout);
            }
            scrollTimeout = setTimeout(handleScroll, 10);
        });

        // Also trigger on initial load to set correct state
        handleScroll();
    </script>
</header>
