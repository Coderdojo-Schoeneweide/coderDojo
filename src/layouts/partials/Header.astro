---
import Logo from "@/components/Logo.astro";
import ThemeSwitcher from "@/components/ThemeSwitcher.astro";
import config from "@/config/config.json";
import menu from "@/config/menu.json";

export interface NavigationLink {
  name: string;
  url: string;
}

const { main }: { main: NavigationLink[] } = menu;
const { settings } = config;
const { pathname } = Astro.url;
---

<header
  class={`header z-30 bg-white dark:bg-darkmode-theme-light ${settings.sticky_header && "sticky top-0"}`}
>
  <nav class="navbar container mx-auto px-4 py-4">
    <!-- logo -->
    <div class="order-0">
      <Logo />
    </div>
    <!-- navbar toggler -->
    <button
      type="button"
      id="menu-toggle"
      class="text-text-dark order-3 dark:text-white lg:order-1 lg:hidden"
      aria-label="Toggle Menu"
      aria-expanded="false"
    >
      <svg class="h-6 fill-current" viewBox="0 0 20 20">
        <title>Menu Open</title>
        <path d="M0 3h20v2H0V3z m0 6h20v2H0V9z m0 6h20v2H0V0z"></path>
      </svg>
    </button>
    <!-- /navbar toggler -->
    <div id="mobile-menu" class="hidden lg:block">
      <ul
        class="navbar-nav order-3 w-full pb-6 lg:order-1 lg:flex lg:w-auto lg:space-x-2 lg:pb-0 xl:space-x-8"
      >
        {
          main.map((menu) => (
            <li class="nav-item">
              <a
                href={menu.url}
                class={`nav-link block text-lg font-medium text-gray-700 hover:text-orange-400 dark:text-white dark:hover:text-orange-400 ${
                  (pathname === `${menu.url}/` || pathname === menu.url) &&
                  "text-orange-400"
                }`}
              >
                {menu.name}
              </a>
            </li>
          ))
        }
      </ul>
    </div>
    <div class="order-1 ml-auto flex items-center md:order-2 lg:ml-0">
      <ThemeSwitcher className="mr-5" />
    </div>
  </nav>
</header>

<style>
  .navbar {
    @apply flex items-center justify-between;
  }
  .navbar-nav {
    @apply flex flex-col;
  }
  @media (min-width: 1024px) {
    .navbar-nav {
      @apply flex-row;
    }
  }
  .nav-item {
    @apply relative;
  }
  .nav-link {
    @apply px-4 py-2;
  }
  @media (max-width: 1023px) {
    #mobile-menu {
      @apply fixed left-0 right-0 top-[72px] z-50 bg-white shadow-lg dark:bg-darkmode-theme-light;
    }
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const menuToggle = document.getElementById("menu-toggle");
    const mobileMenu = document.getElementById("mobile-menu");

    if (!menuToggle || !mobileMenu) return;

    // Initialize menu state
    let isMenuOpen = false;

    const toggleMenu = (forceState?: boolean) => {
      // If forceState is provided, use it, otherwise toggle
      isMenuOpen = forceState !== undefined ? forceState : !isMenuOpen;

      menuToggle.setAttribute("aria-expanded", isMenuOpen.toString());

      if (!isMenuOpen) {
        mobileMenu.classList.add("hidden");
        menuToggle.innerHTML = `
          <svg class="h-6 fill-current" viewBox="0 0 20 20">
            <title>Menu Open</title>
            <path d="M0 3h20v2H0V3z m0 6h20v2H0V9z m0 6h20v2H0V0z"></path>
          </svg>
        `;
      } else {
        mobileMenu.classList.remove("hidden");
        menuToggle.innerHTML = `
          <svg class="h-6 fill-current" viewBox="0 0 20 20">
            <title>Menu Close</title>
            <polygon points="11 9 22 9 22 11 11 11 11 22 9 22 9 11 -2 11 -2 9 9 9 9 -2 11 -2" transform="rotate(45 10 10)"></polygon>
          </svg>
        `;
      }
    };

    // Toggle menu on button click
    menuToggle.addEventListener("click", (e) => {
      e.stopPropagation(); // Prevent click from bubbling to document
      toggleMenu();
    });

    // Close menu when clicking outside
    document.addEventListener("click", (e) => {
      const target = e.target as Node;
      if (
        isMenuOpen &&
        !mobileMenu.contains(target) &&
        !menuToggle.contains(target)
      ) {
        toggleMenu(false);
      }
    });

    // Close menu when clicking a link
    const navLinks = mobileMenu.querySelectorAll(".nav-link");
    navLinks.forEach((link) => {
      link.addEventListener("click", () => {
        if (isMenuOpen) {
          toggleMenu(false);
        }
      });
    });

    // Handle window resize
    const handleResize = () => {
      if (window.innerWidth >= 1024) {
        mobileMenu.classList.remove("hidden");
        menuToggle.classList.add("hidden");
      } else {
        menuToggle.classList.remove("hidden");
        if (isMenuOpen) {
          toggleMenu(false);
        }
      }
    };

    // Initial resize check
    handleResize();

    // Listen for resize events
    window.addEventListener("resize", handleResize);

    // Cleanup function
    return () => {
      window.removeEventListener("resize", handleResize);
      document.removeEventListener("click", () => {});
      menuToggle.removeEventListener("click", () => {});
      navLinks.forEach((link) => {
        link.removeEventListener("click", () => {});
      });
    };
  });
</script>
